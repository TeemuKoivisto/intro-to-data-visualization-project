{"version":3,"sources":["api/guardian-polls.csv","api/guardian-election-results.csv","api/methods.ts","api/poll.api.ts","stores/PollStore.ts","stores/mobxConf.ts","theme/styled.ts","components/WrappedRoute.tsx","components/Charts/PollLineChart.tsx","pages/FrontPage.tsx","index.tsx","stores/index.ts","theme/defaultTheme.ts","routes.tsx"],"names":["module","exports","__webpack_require__","p","getCsv","path","parser","Promise","resolve","reject","parse","delimiter","download","header","skipEmptyLines","complete","results","data","map","row","error","err","parseGuardianData","date","CON","parseFloat","LAB","LIBDEM","OTHER","PollStore","_class","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","_this","asyncToGenerator","regenerator_default","a","mark","_callee","polls","elections","wrap","_context","prev","next","require","sent","runInAction","guardianPolls","guardianResults","stop","settings","enforceActions","styledComponents","styled","default","css","createGlobalStyle","keyframes","ThemeProvider","WrappedRoute","_ref2","Component","component","rest","objectWithoutProperties","react","react_router","assign","render","props","MainWrapper","MainContainer","div","_templateObject","main","_templateObject2","COLORS","wonElection","r","keys","reduce","acc","cur","pc","getColor","key","PollLineChart","_this$props","className","areas","i","x2","x1","wonParty","push","y1","y2","color","length","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","position","angle","x","isFront","stroke","label","fill","fillOpacity","type","activeDot","strokeOpacity","React","PollLineChart_templateObject","FrontPage","inject","stores","pollStore","_dec","FrontPage_class","observer","_React$Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","getGuardianData","_ref","FrontPageContainer","href","FrontPage_templateObject","d","__webpack_exports__","configure","Stores","index_module","styled_components_browser_esm","theme","textLight","textDark","bg","white","primary","secondary","spinner","sizes","small","borderWidth","medium","large","button","fontSize","padding","xlarge","largeIcon","react_router_dom","basename","process","WrappedRoute_WrappedRoute","exact","to","document","getElementById"],"mappings":"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","file":"static/js/main.96a2804c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/guardian-polls.d93782ba.csv\";","module.exports = __webpack_public_path__ + \"static/media/guardian-election-results.b74f7e5b.csv\";","import axios, { AxiosError } from 'axios'\nimport { parse } from 'papaparse'\n\nconst { REACT_APP_API_URL } = process.env\nexport const defaultHeaders = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n}\n\n/**\n * Generates requests using axios since fetch is slightly annoying.\n *\n * Instead of returning Promise<T> whenever there's an error, it throws\n * an Error and computation is stopped inside mobx stores which use this.\n * @param path - The path after the API_URL\n * @param options - Axios options object\n */\nconst createRequest = (path: string, options: any) : Promise<any> => {\n  return axios(`${REACT_APP_API_URL}/${path}`, options)\n    .then(res => res.data)\n    .catch((err: AxiosError) => {\n      if (err.response) {\n        throw new Error(err.response.data.message || err.response.data)\n      }\n      throw err\n    })\n}\n\nexport const getCsv = <T>(path: string, parser: (row: any) => any) : Promise<T> =>\n  new Promise((resolve, reject) => {\n    parse(path, {\n      delimiter: ',',\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      complete(results) {\n        resolve(results.data.map(row => parser(row)) as unknown as T)\n      },\n      error(err: any) {\n        reject(err)\n      }\n    })\n  })\n\nexport const get = <T>(path: string, headers = defaultHeaders) : Promise<T> =>\n  createRequest(path, { headers, method: 'GET' })\n\nexport const post = <T>(path: string, data: any, headers = defaultHeaders) : Promise<T> =>\n  createRequest(path, { headers, data, method: 'POST' })\n\nexport const put = <T>(path: string, data: any, headers = defaultHeaders) : Promise<T> =>\n  createRequest(path, { headers, data, method: 'PUT' })\n\nexport const del = <T>(path: string, headers = defaultHeaders) : Promise<T> =>\n  createRequest(path, { headers, method: 'DELETE' })\n","import { IGuardianPoll } from '../types/poll'\n\nimport {\n  getCsv\n} from './methods'\n\nconst parseGuardianData = (row: any) => ({\n  date: row.date,\n  CON: parseFloat(row.CON),\n  LAB: parseFloat(row.LAB),\n  LIBDEM: parseFloat(row['LIB DEM']),\n  OTHER: parseFloat(row.OTHER),\n})\n\nexport const getGuardianPolls = () =>\n  getCsv<IGuardianPoll[]>(require('./guardian-polls.csv'), parseGuardianData)\n\nexport const getGuardianElectionResults = () =>\n  getCsv<IGuardianPoll[]>(require('./guardian-election-results.csv'), parseGuardianData)\n","import { action, runInAction, observable } from 'mobx'\nimport * as pollApi from '../api/poll.api'\n\nimport { IGuardianPoll } from '../types/poll'\n\nexport class PollStore {\n  @observable guardianPolls: IGuardianPoll[] = []\n  @observable guardianResults: IGuardianPoll[] = []\n\n  @action\n  getGuardianData = async () => {\n    const polls = await pollApi.getGuardianPolls()\n    const elections = await pollApi.getGuardianElectionResults()\n    runInAction(() => {\n      this.guardianPolls = polls\n      this.guardianResults = elections\n    })\n  }\n}\n","import { configure } from 'mobx'\n\nconst settings = { enforceActions: 'observed' as 'observed' }\n\nexport const confMobx = () => configure(settings)\n","import * as styledComponents from 'styled-components'\n\nimport { ITheme } from '../types/theme'\n\nconst {\n  default: styled,\n  css,\n  createGlobalStyle,\n  keyframes,\n  ThemeProvider\n} = styledComponents as styledComponents.ThemedStyledComponentsModule<ITheme>\n\nexport { css, createGlobalStyle, keyframes, ThemeProvider }\nexport default styled\n","import * as React from 'react'\nimport { Route, RouteProps } from 'react-router'\nimport styled from '../theme/styled'\n\n// import { NavBar } from './NavBar'\n\ninterface IWrappedRoute extends RouteProps {\n  component: React.ComponentClass<any>\n}\n\nconst renderNoMainContainerWrapper = (Component: React.ComponentClass) => (props: RouteProps) =>\n  <MainWrapper>\n    {/* <NavBar {...props}/> */}\n    <Component {...props}/>\n  </MainWrapper>\n\nconst renderWrapper = (Component: React.ComponentClass) => (props: RouteProps) =>\n  <MainWrapper>\n    {/* <NavBar {...props}/> */}\n    <MainContainer>\n      <Component {...props}/>\n    </MainContainer>\n  </MainWrapper>\n\nexport const NoMainContainerRoute = ({ component, ...rest } : IWrappedRoute) =>\n  <Route {...rest} render={renderNoMainContainerWrapper(component)}/>\n\nexport const WrappedRoute = ({ component, ...rest } : IWrappedRoute) =>\n  <Route {...rest} render={renderWrapper(component)}/>\n\nconst MainWrapper = styled.div`\n  font-family: 'Raleway', sans-serif;\n  max-width: 980px;\n`\nconst MainContainer = styled.main`\n  margin: 20px;\n`\n","import * as React from 'react'\nimport {\n  LineChart as LChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ReferenceLine, ReferenceArea, LabelList\n} from 'recharts'\nimport styled from '../../theme/styled'\n\nimport { IGuardianPoll } from '../../types/poll'\n\ninterface IProps {\n  className?: string\n  polls: IGuardianPoll[]\n  results: IGuardianPoll[]\n}\n\n// const CustomLabel = (props: LabelProps) =>\n//   <text \n//     x={props.x} \n//     y={props.y} \n//     dy={-4} \n//     fontSize='16' \n//     fontFamily='sans-serif'\n//     fill={props.fill}\n//     textAnchor=\"middle\"\n//   >{props.value}%</text>\n\n// class CustomLabel extends Label {\n//   render() {\n//     const props = this.props\n//     return (\n//       <text \n//       x={props.x} \n//       y={props.y} \n//       dy={-4} \n//       fontSize='16' \n//       fontFamily='sans-serif'\n//       fill={props.fill}\n//       textAnchor=\"middle\"\n//     >{props.value}%</text>\n//     )\n//   }\n// }\n\nconst COLORS = {\n  CON: \"#0087DC\",\n  LAB: \"#DC241f\",\n  LIBDEM: \"#FAA61A\",\n  OTHER: \"#82ca9d\"\n}\n\nconst wonElection = (r: IGuardianPoll) => Object.keys(r).reduce((acc, cur) => {\n  const pc = r[cur]\n  if (acc[1] < pc)  {\n    return [cur, pc] as [string, number]\n  }\n  return acc\n}, ['', 0] as [string, number])\nconst getColor = (key: string) => COLORS[key]\n\nclass PollLineChartClass extends React.PureComponent<IProps> {\n  render() {\n    const { className, polls, results } = this.props\n    const areas = results.reduce((acc, cur, i) => {\n      let x1 = cur.date, x2\n      if (i === 0) {\n        const wonParty = wonElection(cur)\n        acc.push({ x1: polls[i].date, x2: results[i].date, y1: 0, y2: 0.8, color: getColor(wonParty[0]) })\n      }\n      if (i === results.length - 1) {\n        x2 = polls[polls.length - 1].date\n      } else {\n        x2 = results[i + 1].date\n      }\n      const wonParty = wonElection(cur)\n      acc.push({ x1, x2, y1: 0, y2: 0.8, color: getColor(wonParty[0]) })\n      return acc\n    }, [] as any[])\n    return (\n      <LChart\n        className={className}\n        width={1200}\n        height={1000}\n        data={polls}\n        margin={{\n          top: 5, right: 10, left: 5, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\">\n        <LabelList dataKey=\"date\" position=\"right\" angle={45}  />\n\n        </XAxis>\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        { results.map(r => <ReferenceLine key={r.date} x={r.date} isFront={true} stroke=\"red\" label=\"Election\" />)}\n        { areas.map(a => <ReferenceArea key={a.x1 + a.x2} x1={a.x1} x2={a.x2} y1={a.y1} y2={a.y2} fill={a.color} fillOpacity={0.1} />)}\n        <Line type=\"monotone\" dataKey=\"CON\" stroke=\"#0087DC\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"LAB\" stroke=\"#DC241f\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"LIBDEM\" stroke=\"#FAA61A\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"OTHER\" stroke=\"#82ca9d\" activeDot={{ r: 8 }}/>\n        <ReferenceArea x1={150} x2={180} y1={200} y2={300} stroke=\"red\" strokeOpacity={0.3} />\n      </LChart>\n    )\n  }\n}\nexport const PollLineChart = styled(PollLineChartClass)``\n","import * as React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport styled from '../theme/styled'\n\nimport { PollLineChart } from '../components/Charts'\n// import { Button } from '../elements/Button'\n\nimport { Stores } from '../stores'\n\nimport { PollStore } from '../stores/PollStore'\n// import { IGuardianPoll } from '../types/poll'\n\ninterface IProps {\n  pollStore?: PollStore,\n}\n\n@inject((stores: Stores) => ({\n  pollStore: stores.pollStore\n}))\n@observer\nexport class FrontPage extends React.Component<IProps> {\n  componentDidMount() {\n    this.props.pollStore!.getGuardianData()\n  }\n  render() {\n    const { guardianPolls, guardianResults } = this.props.pollStore!\n    return (\n      <FrontPageContainer>\n        <header>\n          <h1><a href=\"https://teemukoivisto.github.io/intro-to-data-visualization-project/\">Interactive Data Visualization Project: Spring 2019</a></h1>\n          <p>British Poll data visualization by Teemu Koivisto</p>\n          <p><a href=\"https://github.com/teemukoivisto/intro-to-data-visualization-project\">Github repo</a></p>\n        </header>\n        <div>\n          <PollLineChart polls={guardianPolls} results={guardianResults}/>\n        </div>\n      </FrontPageContainer>\n    )\n  }\n}\n\nconst FrontPageContainer = styled.div`\n`\n","import * as React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'mobx-react'\nimport { ThemeProvider } from 'styled-components'\n\nimport { Stores } from './stores'\nimport { confMobx } from './stores/mobxConf'\n\nimport { defaultTheme } from './theme/defaultTheme'\n\nimport { Routes } from './routes'\n\nimport './index.css'\n\nconfMobx()\n\nexport const stores = new Stores()\n\nrender(\n  <Provider {...stores}>\n    <ThemeProvider theme={defaultTheme}>\n      <Routes />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n)\n","import { PollStore } from './PollStore'\n\nexport class Stores {\n  public pollStore: PollStore\n\n  constructor() {\n    this.pollStore = new PollStore()\n  }\n}\n","import { ITheme } from '../types/theme'\n\nexport const defaultTheme : ITheme = {\n  color: {\n    textLight: '#666',\n    textDark: '#222',\n    bg: '#fff',\n    white: '#fff',\n    primary: '#2979FF',\n    secondary: '#82B1FF'\n  },\n  spinner: {\n    sizes: {\n      small: {\n        borderWidth: '2px',\n        margin: '0 8px 0 8px',\n        height: '14px',\n        width: '14px',\n      },\n      medium: {\n        borderWidth: '3px',\n        margin: '10px 12px 10px 12px',\n        height: '16px',\n        width: '16px',\n      },\n      large: {\n        borderWidth: '3px',\n        margin: '5px 12px 5px 12px',\n        height: '20px',\n        width: '20px',\n      },\n    }\n  },\n  button: {\n    sizes: {\n      small: {\n        fontSize: '14px',\n        height: '30px',\n        padding: '0 8px',\n      },\n      medium: {\n        fontSize: '16px',\n        height: '40px',\n        padding: '0 12px',\n      },\n      large: {\n        fontSize: '18px',\n        height: '50px',\n        padding: '0 16px',\n      },\n    }\n  },\n  fontSize: {\n    small: '16px',\n    medium: '18px',\n    large: '24px',\n    xlarge: '40px',\n    largeIcon: '50px'\n  },\n}\n","import * as React from 'react'\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom'\n\nimport { WrappedRoute } from './components/WrappedRoute'\n\nimport { FrontPage } from './pages/FrontPage'\n\nexport const Routes = () : React.ReactElement<any> => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <WrappedRoute exact path=\"/\" component={FrontPage}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n)\n"],"sourceRoot":""}