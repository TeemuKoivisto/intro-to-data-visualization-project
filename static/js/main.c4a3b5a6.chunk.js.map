{"version":3,"sources":["api/guardian-polls.csv","api/guardian-election-results.csv","api/methods.ts","api/poll.api.ts","stores/PollStore.ts","stores/mobxConf.ts","theme/styled.ts","components/WrappedRoute.tsx","components/Charts/PollLineChart.tsx","pages/FrontPage.tsx","index.tsx","stores/index.ts","theme/defaultTheme.ts","routes.tsx"],"names":["module","exports","__webpack_require__","p","getCsv","path","parser","Promise","resolve","reject","parse","delimiter","download","header","skipEmptyLines","complete","results","data","map","row","error","err","parseGuardianData","date","CON","parseFloat","LAB","LIBDEM","OTHER","PollStore","_class","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","_this","asyncToGenerator","regenerator_default","a","mark","_callee","polls","elections","wrap","_context","prev","next","require","sent","runInAction","guardianPolls","guardianResults","stop","settings","enforceActions","styledComponents","styled","default","css","createGlobalStyle","keyframes","ThemeProvider","WrappedRoute","_ref2","Component","component","rest","objectWithoutProperties","react","react_router","assign","render","props","MainWrapper","MainContainer","div","_templateObject","main","_templateObject2","PollLineChart","_this$props","className","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","r","key","x","isFront","stroke","label","type","activeDot","React","PollLineChart_templateObject","FrontPage","inject","stores","pollStore","_dec","FrontPage_class","observer","_React$Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","getGuardianData","_ref","FrontPageContainer","href","FrontPage_templateObject","d","__webpack_exports__","configure","Stores","index_module","styled_components_browser_esm","theme","color","textLight","textDark","bg","white","primary","secondary","spinner","sizes","small","borderWidth","medium","large","button","fontSize","padding","xlarge","largeIcon","react_router_dom","basename","process","WrappedRoute_WrappedRoute","exact","to","document","getElementById"],"mappings":"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","file":"static/js/main.c4a3b5a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/guardian-polls.d93782ba.csv\";","module.exports = __webpack_public_path__ + \"static/media/guardian-election-results.b74f7e5b.csv\";","import axios, { AxiosError } from 'axios'\nimport { parse } from 'papaparse'\n\nconst { REACT_APP_API_URL } = process.env\nexport const defaultHeaders = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n}\n\n/**\n * Generates requests using axios since fetch is slightly annoying.\n *\n * Instead of returning Promise<T> whenever there's an error, it throws\n * an Error and computation is stopped inside mobx stores which use this.\n * @param path - The path after the API_URL\n * @param options - Axios options object\n */\nconst createRequest = (path: string, options: any) : Promise<any> => {\n  return axios(`${REACT_APP_API_URL}/${path}`, options)\n    .then(res => res.data)\n    .catch((err: AxiosError) => {\n      if (err.response) {\n        throw new Error(err.response.data.message || err.response.data)\n      }\n      throw err\n    })\n}\n\nexport const getCsv = <T>(path: string, parser: (row: any) => any) : Promise<T> =>\n  new Promise((resolve, reject) => {\n    parse(path, {\n      delimiter: ',',\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      complete(results) {\n        resolve(results.data.map(row => parser(row)) as unknown as T)\n      },\n      error(err: any) {\n        reject(err)\n      }\n    })\n  })\n\nexport const get = <T>(path: string, headers = defaultHeaders) : Promise<T> =>\n  createRequest(path, { headers, method: 'GET' })\n\nexport const post = <T>(path: string, data: any, headers = defaultHeaders) : Promise<T> =>\n  createRequest(path, { headers, data, method: 'POST' })\n\nexport const put = <T>(path: string, data: any, headers = defaultHeaders) : Promise<T> =>\n  createRequest(path, { headers, data, method: 'PUT' })\n\nexport const del = <T>(path: string, headers = defaultHeaders) : Promise<T> =>\n  createRequest(path, { headers, method: 'DELETE' })\n","import { IGuardianPoll } from '../types/poll'\n\nimport {\n  getCsv\n} from './methods'\n\nconst parseGuardianData = (row: any) => ({\n  date: row.date,\n  CON: parseFloat(row.CON),\n  LAB: parseFloat(row.LAB),\n  LIBDEM: parseFloat(row['LIB DEM']),\n  OTHER: parseFloat(row.OTHER),\n})\n\nexport const getGuardianPolls = () =>\n  getCsv<IGuardianPoll[]>(require('./guardian-polls.csv'), parseGuardianData)\n\nexport const getGuardianElectionResults = () =>\n  getCsv<IGuardianPoll[]>(require('./guardian-election-results.csv'), parseGuardianData)\n","import { action, runInAction, observable } from 'mobx'\nimport * as pollApi from '../api/poll.api'\n\nimport { IGuardianPoll } from '../types/poll'\n\nexport class PollStore {\n  @observable guardianPolls: IGuardianPoll[] = []\n  @observable guardianResults: IGuardianPoll[] = []\n\n  @action\n  getGuardianData = async () => {\n    const polls = await pollApi.getGuardianPolls()\n    const elections = await pollApi.getGuardianElectionResults()\n    runInAction(() => {\n      this.guardianPolls = polls\n      this.guardianResults = elections\n    })\n  }\n}\n","import { configure } from 'mobx'\n\nconst settings = { enforceActions: 'observed' as 'observed' }\n\nexport const confMobx = () => configure(settings)\n","import * as styledComponents from 'styled-components'\n\nimport { ITheme } from '../types/theme'\n\nconst {\n  default: styled,\n  css,\n  createGlobalStyle,\n  keyframes,\n  ThemeProvider\n} = styledComponents as styledComponents.ThemedStyledComponentsModule<ITheme>\n\nexport { css, createGlobalStyle, keyframes, ThemeProvider }\nexport default styled\n","import * as React from 'react'\nimport { Route, RouteProps } from 'react-router'\nimport styled from '../theme/styled'\n\n// import { NavBar } from './NavBar'\n\ninterface IWrappedRoute extends RouteProps {\n  component: React.ComponentClass<any>\n}\n\nconst renderNoMainContainerWrapper = (Component: React.ComponentClass) => (props: RouteProps) =>\n  <MainWrapper>\n    {/* <NavBar {...props}/> */}\n    <Component {...props}/>\n  </MainWrapper>\n\nconst renderWrapper = (Component: React.ComponentClass) => (props: RouteProps) =>\n  <MainWrapper>\n    {/* <NavBar {...props}/> */}\n    <MainContainer>\n      <Component {...props}/>\n    </MainContainer>\n  </MainWrapper>\n\nexport const NoMainContainerRoute = ({ component, ...rest } : IWrappedRoute) =>\n  <Route {...rest} render={renderNoMainContainerWrapper(component)}/>\n\nexport const WrappedRoute = ({ component, ...rest } : IWrappedRoute) =>\n  <Route {...rest} render={renderWrapper(component)}/>\n\nconst MainWrapper = styled.div`\n  font-family: 'Raleway', sans-serif;\n  max-width: 980px;\n`\nconst MainContainer = styled.main`\n  margin: 20px;\n`\n","import * as React from 'react'\nimport {\n  LineChart as LChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ReferenceLine,\n} from 'recharts'\nimport styled from '../../theme/styled'\n\nimport { IGuardianPoll } from '../../types/poll'\n\ninterface IProps {\n  className?: string\n  polls: IGuardianPoll[]\n  results: IGuardianPoll[]\n}\n\nclass PollLineChartClass extends React.PureComponent<IProps> {\n  render() {\n    const { className, polls, results } = this.props\n    return (\n      <LChart\n        className={className}\n        width={1200}\n        height={1000}\n        data={polls}\n        margin={{\n          top: 5, right: 10, left: 5, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        { results.map(r => <ReferenceLine key={r.date} x={r.date} isFront={true} stroke=\"red\" label=\"Election\" />)}\n        <Line type=\"monotone\" dataKey=\"CON\" stroke=\"#0087DC\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"LAB\" stroke=\"#DC241f\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"LIBDEM\" stroke=\"#FAA61A\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"OTHER\" stroke=\"#82ca9d\" activeDot={{ r: 8 }}/>\n      </LChart>\n    )\n  }\n}\nexport const PollLineChart = styled(PollLineChartClass)``\n","import * as React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport styled from '../theme/styled'\n\nimport { PollLineChart } from '../components/Charts'\n// import { Button } from '../elements/Button'\n\nimport { Stores } from '../stores'\n\nimport { PollStore } from '../stores/PollStore'\n// import { IGuardianPoll } from '../types/poll'\n\ninterface IProps {\n  pollStore?: PollStore,\n}\n\n@inject((stores: Stores) => ({\n  pollStore: stores.pollStore\n}))\n@observer\nexport class FrontPage extends React.Component<IProps> {\n  componentDidMount() {\n    this.props.pollStore!.getGuardianData()\n  }\n  render() {\n    const { guardianPolls, guardianResults } = this.props.pollStore!\n    return (\n      <FrontPageContainer>\n        <header>\n          <h1><a href=\"https://teemukoivisto.github.io/intro-to-data-visualization-project/\">Interactive Data Visualization Project: Spring 2019</a></h1>\n          <p>British Poll data visualization by Teemu Koivisto</p>\n          <p><a href=\"https://github.com/teemukoivisto/intro-to-data-visualization-project\">Github repo</a></p>\n        </header>\n        <div>\n          <PollLineChart polls={guardianPolls} results={guardianResults}/>\n        </div>\n      </FrontPageContainer>\n    )\n  }\n}\n\nconst FrontPageContainer = styled.div`\n`\n","import * as React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'mobx-react'\nimport { ThemeProvider } from 'styled-components'\n\nimport { Stores } from './stores'\nimport { confMobx } from './stores/mobxConf'\n\nimport { defaultTheme } from './theme/defaultTheme'\n\nimport { Routes } from './routes'\n\nimport './index.css'\n\nconfMobx()\n\nexport const stores = new Stores()\n\nrender(\n  <Provider {...stores}>\n    <ThemeProvider theme={defaultTheme}>\n      <Routes />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n)\n","import { PollStore } from './PollStore'\n\nexport class Stores {\n  public pollStore: PollStore\n\n  constructor() {\n    this.pollStore = new PollStore()\n  }\n}\n","import { ITheme } from '../types/theme'\n\nexport const defaultTheme : ITheme = {\n  color: {\n    textLight: '#666',\n    textDark: '#222',\n    bg: '#fff',\n    white: '#fff',\n    primary: '#2979FF',\n    secondary: '#82B1FF'\n  },\n  spinner: {\n    sizes: {\n      small: {\n        borderWidth: '2px',\n        margin: '0 8px 0 8px',\n        height: '14px',\n        width: '14px',\n      },\n      medium: {\n        borderWidth: '3px',\n        margin: '10px 12px 10px 12px',\n        height: '16px',\n        width: '16px',\n      },\n      large: {\n        borderWidth: '3px',\n        margin: '5px 12px 5px 12px',\n        height: '20px',\n        width: '20px',\n      },\n    }\n  },\n  button: {\n    sizes: {\n      small: {\n        fontSize: '14px',\n        height: '30px',\n        padding: '0 8px',\n      },\n      medium: {\n        fontSize: '16px',\n        height: '40px',\n        padding: '0 12px',\n      },\n      large: {\n        fontSize: '18px',\n        height: '50px',\n        padding: '0 16px',\n      },\n    }\n  },\n  fontSize: {\n    small: '16px',\n    medium: '18px',\n    large: '24px',\n    xlarge: '40px',\n    largeIcon: '50px'\n  },\n}\n","import * as React from 'react'\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom'\n\nimport { WrappedRoute } from './components/WrappedRoute'\n\nimport { FrontPage } from './pages/FrontPage'\n\nexport const Routes = () : React.ReactElement<any> => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <WrappedRoute exact path=\"/\" component={FrontPage}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n)\n"],"sourceRoot":""}